# Learnings

- 1536C: If every partition has same ratio, then combination of some or all
  paritions should also have same ratio. So, let's say we currently have that
  ratio then, maximum number of times we can divide space in that ratio can be
  calculated with storing the frequency of that ratio in hashmap for all the
  prefix.

- 1591D: Dynamic programming with 2 pointers can be powerful. Some times when
  we have O(n^2) time available, we can do something like `F(i, j) = F(i + 1, j - 1)` + f(i, j) kind of stuff

- 1547E: If there is somewhere mod function equation, its easy to break the
  question in two cases. First: where mod evaluates to positive and second where
  mod evaluates to negative. Solve them, and then solve the original question
  with composition function provided.

- 1307C: Series like AP, GP is defined by a pair. i.e., each pair would be part
  of a sequence.

- 1461C: Its easy to calculate the probability of any event pass using 1- all
  events fail.

- 1614C: We define a subset on criteria of including and not including an
  element. Now its a binary criteria and doesn't depend on element in any ways.
  Similary let's say there are only 2 kinds of elements. Now that kind of
  element is included even or odd number of times is also a binary criteria.
  And thus also defines subset. Now there are `2**n` total subsets. There are
  `2**(n - 1)` subsets that does include them. Similarily, there are `2**(n -
1)` subsets that include an element odd number of times. Xor of them should be
  1 If that is i bit, then their contribution to sum is (1 << i) _ (1 << (n - 1))
  If that bit is there in any subset, then only it would contribute. That means
  its kind of bitwise or _ (1 << (n - 1))

- 1408C: When you want binary search on doubles, binary search on integers only.
  Because, that's classic. However, in predicate function convert that integer to
  double. So, let's say min possible error is 1e-6 then just pass low \* 1e6, high \* 1e6.

- 553A: When dealing with combinatorics question, its a good option
  to think in lines, when it happened for i terms, then what for i + 1 term.

- 1242A: Chineese remainder theorom is very useful, when dealing with
  prime factors and overlapping of their multiples. It has 2 ways to think:

  ```
  === is congruent to operator
  x === a1 mod n1
  x === a2 mod n2
  and so on,
  then there exists a unique solution modulo N = n1n2
  ```

  Or there is another way

  ```
  n = n1n2

  For every 1 <= i < n1, 1 <= j < n2

  Then, there exists x <= n st
  x === i mod n1
  x === j mod n2

  i.e., x = a1n1 + i, x = a2n2 + j
  ```

- 707C: If there is sometimes to solve `a * b = n`, then we can sometimes assume
  that a * b = n * 1 and can equate a = n and b = 1. So, think in those lines too.

- 742B: Sometimes having log n factor by sorting and then using equal range for
  counting is very easy to implement than comparing hashing version.

- 1178D: There always exists a prime between [n, 3n/2] for all n > 3.

- 630K: lcm(a, b, c) is NOT equal to (a * b * c) / gcd(a, b, c).

- 566F: In divisibility dp, we can maintain an dp state like dp[x] is
  ans ending with number x. And do dp in forward direction:
  ```
  for(ll i = 1; i <= MAX; ++i){
    dp[i] = max(dp[i], cnt[i]);
    for(ll j = i + i; j <= MAX; j += i){
       dp[j] = max(dp[j], dp[i] + cnt[j]);
    }
  }
  ```

  And this is O(n log n) (MAX = n, so MAX number should be like 1e6)
  Also, many times having cnt[x] in these kinds of problems is useful.

- 1084C: Many times, some combinatorics DP problem can be reduced by formula.
  And choosing one from atleast one can be done via: (n1 + 1) * (n2 + 1) * (n3 +
  1) * ... - 1 +1 is to include the case of choosing nothing from that list and
  -1 is case for choosing nothing from full list.

- 677C: When there is any number with base 2^n, then binary conversion of that
  number is just binary conversion of each digit represented in n-bits.

  If we need to find bitwise and of 2 things equal s, then number of ways is
  counted as if there is 1 bit in s, then that is only possible by having 1 & 1
  so one choice. For all zero bits there are 3 different choice 0 & 1, 1 & 0, 0 & 0.

## Proving techiniques

- If a and b are 2 dependent variables contributing to something, then without
  loss of generality we can define behaviour of a variable and according to
  that behaviour of other variable would be chosen.
